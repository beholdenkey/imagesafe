{
  $schema: "https://docs.renovatebot.com/renovate-schema.json",
  extends: [
    "config:recommended",
    "docker:enableMajor",
    "helpers:pinGitHubActionDigests",
    ":automergeBranch",
    ":dependencyDashboard",
    ":disableRateLimiting",
    ":semanticCommits",
  ],
  dependencyDashboard: true,
  dependencyDashboardTitle: "Renovate Dashboard ðŸ¤–",
  suppressNotifications: [
    "prEditedNotification",
    "prIgnoreNotification",
  ],
  schedule: ["every weekend"],
  ignorePaths: ["**/*.sops.*"],
  flux: {
    fileMatch: ["(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$"],
  },
  "helm-values": {
    fileMatch: ["(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$"],
  },
  helmfile: {
    fileMatch: ["(^|/)helmfile\\.ya?ml(?:\\.j2)?$"],
  },
  kubernetes: {
    fileMatch: ["(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$"],
  },
  kustomize: {
    fileMatch: ["(^|/)kustomization\\.ya?ml(?:\\.j2)?$"],
  },
  packageRules: [
    {
      description: "CoreDNS Group",
      groupName: "CoreDNS",
      matchDatasources: ["docker"],
      matchPackageNames: ["/coredns/"],
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
    },
    {
      description: "Flux Operator Group",
      groupName: "Flux Operator",
      matchPackageNames: ["/flux-operator/", "/flux-instance/"],
      matchDatasources: ["docker"],
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
    },
    {
      description: "Spegel Group",
      groupName: "Spegel",
      matchDatasources: ["docker"],
      matchPackageNames: ["/spegel/"],
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
    },
    {
      description: "Auto-merge GitHub Actions",
      matchManagers: ["github-actions"],
      automerge: true,
      automergeType: "branch",
      matchUpdateTypes: ["minor", "patch", "digest"],
      minimumReleaseAge: "3 days",
      ignoreTests: true,
    },
    {
      matchUpdateTypes: ["major"],
      semanticCommitType: "feat",
      commitMessagePrefix: "{{semanticCommitType}}({{semanticCommitScope}})!:",
      commitMessageExtra: "( {{currentVersion}} â†’ {{newVersion}} )",
    },
    {
      matchUpdateTypes: ["minor"],
      semanticCommitType: "feat",
      commitMessageExtra: "( {{currentVersion}} â†’ {{newVersion}} )",
    },
    {
      matchUpdateTypes: ["patch"],
      semanticCommitType: "fix",
      commitMessageExtra: "( {{currentVersion}} â†’ {{newVersion}} )",
    },
    {
      matchUpdateTypes: ["digest"],
      semanticCommitType: "chore",
      commitMessageExtra: "( {{currentDigestShort}} â†’ {{newDigestShort}} )",
    },
    {
      matchDatasources: ["docker"],
      semanticCommitScope: "container",
      commitMessageTopic: "image {{depName}}",
    },
    {
      matchDatasources: ["helm"],
      semanticCommitScope: "helm",
      commitMessageTopic: "chart {{depName}}",
    },
    {
      matchManagers: ["github-actions"],
      semanticCommitType: "ci",
      semanticCommitScope: "github-action",
      commitMessageTopic: "action {{depName}}",
    },
    {
      matchDatasources: ["github-releases"],
      semanticCommitScope: "github-release",
      commitMessageTopic: "release {{depName}}",
    },
    {
      matchUpdateTypes: ["major"],
      labels: ["type/major"],
    },
    {
      matchUpdateTypes: ["minor"],
      labels: ["type/minor"],
    },
    {
      matchUpdateTypes: ["patch"],
      labels: ["type/patch"],
    },
    {
      matchDatasources: ["docker"],
      addLabels: ["renovate/container"],
    },
    {
      matchDatasources: ["helm"],
      addLabels: ["renovate/helm"],
    },
    {
      matchManagers: ["github-actions"],
      addLabels: ["renovate/github-action"],
    },
    {
      matchDatasources: ["github-releases"],
      addLabels: ["renovate/github-release"],
    },
  ],
  customManagers: [
    {
      customType: 'regex',
      description: [
        'Process custom dependencies',
      ],
      managerFilePatterns: [
        '/^.+\\.ya?ml$/',
        '/(?i)^taskfile\\.ya?ml$/',
      ],
      matchStrings: [
        'datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)( repository=(?<registryUrl>\\S+))?\\n.+: (&\\S+\\s)?(?<currentValue>\\S+)',
        '# renovate:\\s+datasource=(?<datasource>github-releases|github-tags)\\s+depName=(?<depName>\\S+)\\s*\\n.+:\\s*"?(v)?(?<currentValue>[^"]+)"?',
      ],
      datasourceTemplate: '{{#if datasource}}{{{datasource}}}{{else}}github-releases{{/if}}',
      versioningTemplate: 'semver',
    },
    {
      customType: 'regex',
      managerFilePatterns: [
        '/^Dockerfile$/',
      ],
      matchStrings: [
        '#\\s*renovate:\\s*datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\sENV .*?_VERSION="(?<currentValue>.*)"\\s',
      ],
      versioningTemplate: '{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}',
    },
  ],
}
