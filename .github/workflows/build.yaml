---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build

on:
  push:
    branches:
      - main
    paths-ignore:
      - README.md
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changed:
    uses: ./.github/workflows/get-changed.yaml

  discover:
    name: Discover images to build
    runs-on: ubuntu-latest
    needs:
      - changed
    outputs:
      matrix: ${{ steps.make-matrix.outputs.matrix }}
      count: ${{ steps.make-matrix.outputs.count }}
    steps:
      - uses: actions/checkout@v4

      - id: make-matrix
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob

          event="${{ github.event_name }}"
          csv="${{ needs.changed.outputs.addedOrModifiedImages }}"

          declare -a names=()

          if [[ "$event" == "schedule" ]]; then
            # Nightly: build ALL images
            mapfile -t names < <(find images -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort -u)
          else
            # Push / dispatch: build only changed ones (from reusable workflow)
            if [[ -n "${csv}" ]]; then
              IFS=, read -r -a names <<< "$csv"
            fi
          fi

          count="${#names[@]}"
          echo "count=$count" >> "$GITHUB_OUTPUT"

          if [[ "$count" -eq 0 ]]; then
            echo 'matrix={"include":[]}' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Build compact JSON matrix: { "include": [ { "name": "...", "config": "images/.../apko.yaml" }, ... ] }
          json=$(
            printf '%s\n' "${names[@]}" \
              | awk '{printf "{\"name\":\"%s\",\"config\":\"images/%s/apko.yaml\"}\n",$1,$1}' \
              | jq -c -s '{include: .}'
          )
          echo "matrix=$json" >> "$GITHUB_OUTPUT"

  build:
    name: Build images
    needs:
      - discover
    if: ${{ needs.discover.outputs.count != '0' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Optional: cache APK packages between runs (helps when indices don't churn too much)
      - name: Prepare APK cache
        run: |
          sudo mkdir -p /var/cache/apk
          sudo ln -sf /var/cache/apk /etc/apk/cache || true

      - name: Cache APK packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apk
          key: apk-${{ runner.os }}-${{ hashFiles(matrix.config) }}
          restore-keys: |
            apk-${{ runner.os }}-

      - name: Extract version tag from apko.yaml
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          file="${{ matrix.config }}"

          # Prefer OCI annotation
          ver=$(awk '
            inAnn && $0 ~ /^[^ ]/ { inAnn=0 }
            /^(annotations:)/ { inAnn=1; next }
            inAnn && $0 ~ /org\.opencontainers\.image\.version:/ {
              sub(/.*org\.opencontainers\.image\.version:[[:space:]]*"?/,""); sub(/"$/,""); print; exit
            }' "$file" || true)

          # Fallback: first pinned package like name=1.2.3
          if [[ -z "${ver:-}" ]]; then
            ver=$(grep -E '^[[:space:]]*-[[:space:]]*[a-zA-Z0-9_.+-]+=[0-9][0-9A-Za-z._-]*' "$file" \
                  | head -1 | sed -E 's/.*=([0-9A-Za-z._-]+).*/\1/') || true
          fi

          ver=${ver:-latest}
          echo "version=$ver" >> "$GITHUB_OUTPUT"

      - name: Build ${{ matrix.name }}
        id: apko
        uses: chainguard-images/actions/apko-publish@main
        with:
          config: ${{ matrix.config }}
          tag: >
            ghcr.io/${{ github.repository }}/${{ matrix.name }}:latest
            ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ steps.meta.outputs.version }}
            ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ github.sha }}

      - name: Output digest
        shell: bash
        run: |-
          echo "Published digest(s):"
          echo "${{ steps.apko.outputs.digest }}"
